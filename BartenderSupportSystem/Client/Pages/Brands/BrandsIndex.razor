@page "/brands"
@using BartenderSupportSystem.Client.Repositories
@using BartenderSupportSystem.Shared.Models.RecommendationSystem
@using AutoMapper
@using BartenderSupportSystem.Client.ViewModels.RecommendationSystem
@using BartenderSupportSystem.Shared.Utils
@inject NavigationManager NavigationManager
<h3>Brands Index</h3>

<Pagination CurrentPage="@PaginationDto.Page" TotalAmountOfPages="_totalAmountOfPages" OnSelectedPage="OnSelectedPage">

</Pagination>
@if (_brands != null)
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Country Of Origin</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var brand in _brands)
        {
            <tr>
                <td>@brand.Name</td>
                <td>@brand.CountryOfOrigin</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}
<BrandsForm BrandViewModel="BrandViewModel" OnValidSubmit="AddBrand" />

@code {
    [Inject] public IRepository<Brand> BrandRepository { get; set; }
    [Inject] public IMapper Mapper { get; set; }
    public PaginationDto PaginationDto { get; set; } = new PaginationDto {AmountOfRecordsPerPage = 2};
    public BrandViewModel BrandViewModel { get; set; } = new BrandViewModel { Id = Guid.NewGuid() };
    private List<BrandViewModel> _brands;
    private int _totalAmountOfPages;

    private async Task AddBrand()
    {
        var brand = Mapper.Map<BrandViewModel, Brand>(BrandViewModel);
        await BrandRepository.AddOne(brand);
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBrands();
    }

    protected async Task OnSelectedPage(int page)
    {
        PaginationDto.Page = page;
        await LoadBrands();
    }

    private async Task LoadBrands()
    {
        var paginatedBrandModelsResponse = await BrandRepository.GetPaginated(PaginationDto);
        _totalAmountOfPages = paginatedBrandModelsResponse.TotalAmountOfPages;
        _brands = Mapper.Map<List<Brand>, List<BrandViewModel>>(paginatedBrandModelsResponse.Content.ToList());
    }
}
