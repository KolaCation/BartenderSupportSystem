@page "/drinks"
@using BartenderSupportSystem.Shared.Models.RecommendationSystem
@using AutoMapper
@using BartenderSupportSystem.Client.Repositories.Interfaces
@using BartenderSupportSystem.Client.ViewModels.RecommendationSystem
@using BartenderSupportSystem.Shared.Utils.RecommendationSystem.Drinks
<h3>Drinks Index</h3>

<DrinksFilter DrinkFilterDto="@DrinkFilterDto" OnSubmit="OnSubmit" />
<GenericList List="@_drinks">
    <WholeListTemplate>
        <div class="row justify-content-start m-3">
            @foreach (var drink in _drinks)
            {
                <div class="col-lg-4 col-md-6 col-sm-12 mt-3">
                    @if (drink.PhotoPath != null)
                    {
                        <div style="border: 2px solid #e3e3f1;">
                            <img class="card-img-top" src="@drink.PhotoPath" stype="width: 400px; height: 400px;" alt="Card image cap">
                        </div>
                    }
                    <div class="card text-center">
                        <h5 class="card-header"><a href="/drinks/@drink.Id">@drink.Name</a></h5>
                        <div class="card-body">
                            <div class="row justify-content-center">
                                <a class="btn btn-success m-2" href="/drinks/edit/@drink.Id">Edit</a>
                                <button class="btn btn-danger m-2" @onclick="@(() => Delete(drink.Id))">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </WholeListTemplate>
</GenericList>

@code {
    [Inject] IDrinkRepository DrinkRepository { get; set; }
    [Inject] IMapper Mapper { get; set; }
    public DrinkFilterDto DrinkFilterDto { get; set; } = new DrinkFilterDto();
    private List<DrinkViewModel> _drinks;

    protected override async Task OnInitializedAsync()
    {
        var drinks = await DrinkRepository.GetDrinks();
        _drinks = Mapper.Map<List<DrinkDto>, List<DrinkViewModel>>(drinks);
    }

    private async Task Delete(Guid id)
    {
        await DrinkRepository.DeleteDrink(id);
    }

    private async Task OnSubmit()
    {
    }
}
