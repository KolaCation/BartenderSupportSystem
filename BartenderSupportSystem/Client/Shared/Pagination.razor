<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            <li @onclick="@(() => SelectedPage(link))"
                 style="cursor: pointer;"
                 class="page-item @(link.IsEnabled ? null : "disabled") @(link.IsActive ? "active" : null)">
                <span class="page-link" href="#">@link.TextOnButton</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int Radius { get; set; } = 3;
    [Parameter] public int TotalAmountOfPages { get; set; }
    [Parameter] public EventCallback<int> OnSelectedPage { get; set; }
    private List<LinkModel> links;

    private async Task SelectedPage(LinkModel link)
    {
        if (link.PageNumber == CurrentPage)
        {
            return;
        }
        if (!link.IsEnabled)
        {
            return;
        }
        CurrentPage = link.PageNumber;
        await OnSelectedPage.InvokeAsync(link.PageNumber);
    }

    protected override void OnParametersSet()
    {
        LoadPages();
        base.OnParametersSet();
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();
        var isPreviousPageLinkEnabled = CurrentPage != 1;
        var previousPage = CurrentPage - 1;
        links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, "Previous"));
        for (int i = 1; i <= TotalAmountOfPages; i++)
        {
            if (i <= CurrentPage + Radius && i >= CurrentPage - Radius)
            {
                links.Add(new LinkModel(i) {IsActive = i == CurrentPage});
            }
        }
        var isNextPageLinkEnabled = CurrentPage != TotalAmountOfPages;
        var nextPage = CurrentPage + 1;
        links.Add(new LinkModel(nextPage, isNextPageLinkEnabled, "Next"));
    }

    private class LinkModel
    {
        public int PageNumber { get; set; }
        public bool IsEnabled { get; set; }
        public bool IsActive { get; set; } = false;
        public string TextOnButton { get; set; }

        public LinkModel(int pageNumber, bool isEnabled, string textOnButton)
        {
            PageNumber = pageNumber;
            IsEnabled = isEnabled;
            TextOnButton = textOnButton;
        }

        public LinkModel(int pageNumber, bool isEnabled = true) 
            : this(pageNumber, isEnabled, pageNumber.ToString()) {}

    }
}
